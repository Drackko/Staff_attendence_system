{% extends 'base.html' %} 
{% load static %}
{% block content %}
<div class="container">
  <!-- Sidebar -->
  <div class="sidebar">
    <div class="sidebar-header">
      <h3>Staff Dashboard</h3>
    </div>
    <div class="sidebar-menu">
      <ul>
        <li>
          <a href="{% url 'home' %}" class="active"
            ><i class="fas fa-home"></i> Home</a
          >
        </li>
        <li>
          <a href="{% url 'report' %}" class="fas">
            <i class="fas fa-chart-bar"></i> Reports</a>
        </li>
        {% if user.is_superuser %}
        <li>
          <a href="{% url 'manage_employees' %}">
              <i class="fas fa-users-cog"></i> Manage Employees
          </a>
        </li>
        {% endif %}
        <li>
          <a href="{% url 'logout' %}"
            ><i class="fas fa-sign-out-alt"></i> Logout</a
          >
        </li>
      </ul>
    </div>
  </div>

  <!-- Main Content -->
  <div class="main-content">
    <div class="header">
      <h1>Welcome, {{ user.username }}!</h1>
    </div>

    <div class="dashboard-grid">
      <!-- Stats Cards -->
      <div class="stats-container">
        <div class="stat-card">
          <i class="fas fa-users"></i>
          <div class="stat-info">
            <h3>Total Staff</h3>
            <p>{{ total_staff }}</p>
          </div>
        </div>
        <div class="stat-card">
          <i class="fas fa-user-check"></i>
          <div class="stat-info">
            <h3>Present Today</h3>
            <p>{{ present_count }}</p>
          </div>
        </div>
      </div>    
      <!-- Live Stream Container -->
      <div class="live-stream-container">
        <div class="stream-header">
          <h2><i class="fas fa-camera"></i> Live Detection</h2>
        </div>
        <div class="stream-content">
          <img id="video-frame" src="" alt="Video Stream"/>
        </div>
           <!-- Check-In / Check-Out Buttons -->
    <div class="checkin-checkout-buttons">
      <button class="btn-checkin" onclick="checkIn()">
        <i class="fas fa-sign-in-alt"></i> Check-In
      </button>
      <button class="btn-checkout" onclick="checkOut()">
        <i class="fas fa-sign-out-alt"></i> Check-Out
      </button>
B    </div>
      </div>
    </div>

    <div class="attendance-section">
      <h2><i class="fas fa-clock"></i> Today's Attendance ({{ current_date|date:"F d, Y" }})</h2>
      <div class="table-container">
        <table class="attendance-table">
          <thead>
            <tr>
              <th>S.No</th>
              <th>Staff ID</th>
              <th>Name</th>
              <th>Department</th>
              <th>In Time</th>
              <th>Out Time</th>
              <th>Working Hours</th>
            </tr>
          </thead>
          <tbody>
            {% for record in attendance_data %}
            <tr>
              <td>{{ forloop.counter }}</td>
              <td>{{ record.emp_id }}</td>
              <td>{{ record.emp_name }}</td>
              <td>{{ record.department }}</td>
              <td>{{ record.time_in_list|default:"--:--" }}</td>
              <td>{{ record.time_out_list|default:"--:--" }}</td>
              <td>{{ record.working_hours|default:"--:--" }}</td>
            </tr>
            {% empty %}
            <tr>
              <td colspan="7" class="no-data">No attendance records for today</td>
            </tr>
            {% endfor %}
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const videoFrame = document.getElementById("video-frame");

      let IP;
      fetch('/api/get_env/')
        .then(response => response.json())
        .then(env => {
            IP = env.IP;
	    console.log("IP found",IP);
        })
        .catch(error => console.error('Error Fetching environment variable:',error));

	console.log("URL : ",IP);
      function startStream() {
        const eventSource = new EventSource(`http://${IP}:5600/video_stream`);

        eventSource.onmessage = function (event) {          try {
            let frameData = JSON.parse(event.data);

            if (frameData.image) {
              videoFrame.src = "data:image/jpeg;base64," + frameData.image;
            } else {
              console.error("No image data received.");
            }
          } catch (error) {
            console.error("Error parsing stream data:", error);
          }
        };

        eventSource.onerror = function () {
          console.error("Stream Disconnected. Retrying...");
          eventSource.close();
          setTimeout(startStream, 3000);  // Reconnect after 3 seconds
        };
      }

      startStream(); // Start the stream when the page loads
    });

    // Check-In and Check-Out Functions
    async function checkIn() {
    const response = await fetch(`http://${IP}:5600/check-in`);
    const result = await response.json();
    console.log(result);
    }

    async function checkOut() {
        const response = await fetch(`http://${IP}:5600/check-out`);
        const result = await response.json();
        console.log(result);
    }

 </script>

  <style>
    body {
      margin: 0;
      font-family: "Arial", sans-serif;
    }
    .container {
      display: flex;
      min-height: 100vh;
    }

    .sidebar {
      width: 150px;
      background: #2c3e50;
      color: white;
      padding: 20px;
    }

    .sidebar-header {
      padding: 20px 0;
      border-bottom: 1px solid #34495e;
    }

    .sidebar-menu ul {
      list-style: none;
      padding: 0;
    }

    .sidebar-menu ul li {
      margin: 15px 0;
    }

    .sidebar-menu ul li a {
      color: white;
      text-decoration: none;
      display: block;
      padding: 10px;
      border-radius: 5px;
      transition: 0.3s;
    }

    .sidebar-menu ul li a:hover,
    .sidebar-menu ul li a.active {
      background: #34495e;
    }

    .main-content {
      flex: 1;
      padding: 30px;
      background: #f5f6fa;
    }

    .checkin-checkout-buttons {
      display: flex;
      gap: 15px;
      margin-bottom: 20px;
    }

    .btn-checkin,
    .btn-checkout {
      padding: 10px 20px;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .btn-checkin {
      background: #28a745;
      color: white;
    }

    .btn-checkin:hover {
      background: #218838;
    }

    .btn-checkout {
      background: #dc3545;
      color: white;
    }

    .btn-checkout:hover {
      background: #c82333;
    }

    .dashboard-grid {
      display: grid;
      grid-template-columns: 1fr 1.5fr;
      gap: 20px;
      margin-bottom: 30px;
    }

    .stats-container {
      display: flex;
      flex-direction: column;
      gap: 15px;
    }

    .stat-card {
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      display: flex;
      align-items: center;
      gap: 20px;
      transition: transform 0.3s ease;
    }

    .stat-card:hover {
      transform: translateY(-5px);
    }

    .stat-card i {
      font-size: 2.5rem;
      color: #3498db;
    }

    .live-stream-container {
      background: white;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      height: fit-content;
    }

    .stream-content {
      aspect-ratio: 16/9;
      background: #f8f9fa;
      border: 2px dashed #ddd;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: 300px;
      overflow: hidden;
    }

    .stream-content img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .attendance-section {
      background: white;
      border-radius: 10px;
      padding: 20px;
      margin-top: 30px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .attendance-section h2 {
      color: #2c3e50;
      margin-bottom: 20px;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .table-container {
      overflow-x: auto;
    }

    .attendance-table {
      width: 100%;
      border-collapse: collapse;
      min-width: 600px;
    }

    .attendance-table th,
    .attendance-table td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #eee;
    }

    .attendance-table th {
      background: #f8f9fa;
      color: #2c3e50;
      font-weight: 600;
    }

    .status {
      padding: 5px 10px;
      border-radius: 15px;
      font-size: 0.85em;
      font-weight: 500;
    }

    .status.present {
      background: #e3fcef;
      color: #00a854;
    }

    .status.absent {
      background: #ffe7e7;
      color: #ff4d4f;
    }

    @media (max-width: 1024px) {
      .dashboard-grid {
        grid-template-columns: 1fr;
      }
      .stats-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      }
    }

    @media (max-width: 768px) {
      .stats-container {
        grid-template-columns: 1fr;
      }
      .attendance-section {
        margin-top: 20px;
        padding: 15px;
      }
      .attendance-table th,
      .attendance-table td {
        padding: 10px;
      }
    }

    @media (max-width: 768px) {
      .container {
        flex-direction: column;
      }
      .sidebar {
        width: 100%;
      }
      .stats-container {
        grid-template-columns: 1fr;
      }
    }
  </style>
  <style>
    /* Add these styles to your existing CSS in home.html */

.processing-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: white;
    z-index: 1000;
}

.spinner {
    width: 50px;
    height: 50px;
    border: 5px solid #f3f3f3;
    border-top: 5px solid #3498db;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 10px;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.result-message {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 15px 25px;
    border-radius: 5px;
    color: white;
    z-index: 1000;
    animation: slideIn 0.3s ease-out;
}

.result-message.success {
    background-color: #28a745;
}

.result-message.error {
    background-color: #dc3545;
}

@keyframes slideIn {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

.stream-content {
    position: relative;
}
  </style>
</div>
<script>
  // Add this JavaScript to your home.html

function showProcessingOverlay() {
    const streamContent = document.querySelector('.stream-content');
    const overlay = document.createElement('div');
    overlay.className = 'processing-overlay';
    overlay.innerHTML = `
        <div class="spinner"></div>
        <p>Processing...</p>
    `;
    streamContent.appendChild(overlay);
}

function hideProcessingOverlay() {
    const overlay = document.querySelector('.processing-overlay');
    if (overlay) {
        overlay.remove();
    }
}

// Update these functions in your home.html

async function checkIn() {
    try {
        showProcessingOverlay();
        const response = await fetch('http://127.0.0.1:5600/check-in');
        const result = await response.json();
        
        if (response.ok) {
            showResult(`Check-in successful for ${result.employee.id} (Confidence: ${result.employee.confidence})`, true);
            // Refresh the attendance table
            location.reload();
        } else {
            // Handle error response
            const errorMessage = result.detail || 'Check-in failed';
            showResult(errorMessage, false);
            console.error('Check-in error:', errorMessage);
        }
    } catch (error) {
        // Handle network or other errors
        const errorMessage = 'Error connecting to server. Please try again.';
        showResult(errorMessage, false);
        console.error('Check-in error:', error);
    } finally {
        hideProcessingOverlay();
    }
}

async function checkOut() {
    try {
        showProcessingOverlay();
        const response = await fetch('http://127.0.0.1:5600/check-out');
        const result = await response.json();
        
        if (response.ok) {
            showResult(`Check-out successful for ${result.employee.id} (Confidence: ${result.employee.confidence})`, true);
            // Refresh the attendance table
            location.reload();
        } else {
            // Handle error response
            const errorMessage = result.detail || 'Check-out failed';
            showResult(errorMessage, false);
            console.error('Check-out error:', errorMessage);
        }
    } catch (error) {
        // Handle network or other errors
        const errorMessage = 'Error connecting to server. Please try again.';
        showResult(errorMessage, false);
        console.error('Check-out error:', error);
    } finally {
        hideProcessingOverlay();
    }
}

// Add this function to show error messages on the page
function showResult(message, isSuccess) {
    const resultDiv = document.createElement('div');
    resultDiv.className = `result-message ${isSuccess ? 'success' : 'error'}`;
    resultDiv.textContent = message;
    
    // Add error icon for failures
    if (!isSuccess) {
        const icon = document.createElement('i');
        icon.className = 'fas fa-exclamation-circle';
        resultDiv.prepend(icon);
    }
    
    document.querySelector('.live-stream-container').appendChild(resultDiv);
    
    // Remove the message after 5 seconds
    setTimeout(() => {
        if (resultDiv.parentElement) {
            resultDiv.remove();
        }
    }, 5000);
}
</script>
{% endblock %}
